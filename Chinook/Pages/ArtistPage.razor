@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services;
@using ChinookDataAccessLayer.Models;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(InfoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @InfoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (Artist == null)
{
    <Loading />
}
else
{
    <h1>@Artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in Tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-filled"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    /*Removing direct injecting of db context and using separate services to get data*/
    //[Inject] IDbContextFactory<ChinookContext> DbFactory { get; set; }
    @inject ArtistsService artistsService;
    @inject TracksService tracksService;
    @inject PlayListsService playListService;
    @inject IJSRuntime JS;
    private Modal PlaylistDialog { get; set; }

    private ArtistData Artist;
    private List<PlaylistTrack> Tracks;
    private List<UserPlaylistData> UserPlayLists;
    private UserPlaylistData SelectedPlayList;
    private DbContext DbContext;
    private PlaylistTrack SelectedTrack;
    private string InfoMessage;
    private string ErrorMessage = "";
    private string CurrentUserId;
    private string AddedPlayListName = "";

    @inject IJSRuntime JS;//Injecting JS runtime object

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        CurrentUserId = await GetUserId();

        Artist = (await artistsService.GetArtists()).SingleOrDefault(a => a.ArtistId == ArtistId);
        Tracks = tracksService.GetTracks(ArtistId, CurrentUserId);
        UserPlayLists = playListService.GetUserPlayLists(CurrentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    /// <summary>
    /// Adding favourites
    /// </summary>
    /// <param name="trackId"></param>
    private async void FavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        await JS.InvokeAsync<string>("UpdatePlayList", new { userId = CurrentUserId, playListId = Constants.MyFravouriteListId, trackId = trackId, addToFavouriteTracks = true, isFavourite = true });
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    /// <summary>
    /// Removing favourits
    /// </summary>
    /// <param name="trackId"></param>
    private async void UnfavoriteTrack(long trackId)
    {
        var track = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        await JS.InvokeAsync<string>("UpdatePlayList", new { userId = CurrentUserId, playListId = Constants.MyFravouriteListId, trackId = trackId, addToFavouriteTracks = true, isFavourite = false });
        InfoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        SelectedTrack = Tracks.FirstOrDefault(t => t.TrackId == trackId);
        PlaylistDialog.Open();
    }

    /// <summary>
    /// called when an existing playlist is selected.
    /// </summary>
    /// <param name="e"></param>
    private void OnPlayListSelected(ChangeEventArgs e)
    {
        if (long.Parse(e.Value.ToString()) == 0)
            SelectedPlayList = new UserPlaylistData();

        SelectedPlayList = UserPlayLists.FirstOrDefault(t => t.PlaylistId == long.Parse(e.Value.ToString()));
        AddedPlayListName = "";
    }

    /// <summary>
    /// Called when a new play list is added 
    /// </summary>
    /// <param name="e"></param>
    private void OnNewPlaylistNameAdded(ChangeEventArgs e)
    {
        AddedPlayListName = e.Value.ToString();
        SelectedPlayList = UserPlayLists.FirstOrDefault(t => t.PlaylistId == Constants.DefaultPlayListId);
    }

    private void CloseInfoMessage()
    {
        InfoMessage = "";
    }

    private void CloseErrorMessage()
    {
        ErrorMessage = "";
    }

    /// <summary>
    /// Common method to add tracks to favourite list, remove from favourite list, adding tracks to different lists
    /// </summary>
    private async void AddTracks()
    {
        if (AddedPlayListName == "" && (SelectedPlayList == null || SelectedPlayList.PlaylistId == 0))
        {
            ErrorMessage = "Please select a valid Existing playlist or a valid name to create a playlist";

        }
        else
        {
            var selectedPlayListId = SelectedPlayList != null ? SelectedPlayList.PlaylistId : Constants.DefaultPlayListId;
            await JS.InvokeAsync<object>("UpdatePlayList", new { userId = CurrentUserId, playListId = selectedPlayListId, playListName = AddedPlayListName, trackId = SelectedTrack.TrackId, addToFavouriteTracks = false, isFavourite = false });
        }
    }
}


<Modal @ref="PlaylistDialog">

    <Title>
        Add to playlist
    </Title>
    <Body>

        @if (SelectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@Artist.Name - @SelectedTrack.AlbumTitle - @SelectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @onchange="OnPlayListSelected">
                @foreach (var userPlayList in UserPlayLists)
                {
                    var selected = userPlayList.PlaylistId == Constants.DefaultPlayListId;
                    <option id="@userPlayList.PlaylistId" value="@userPlayList.PlaylistId" selected="@selected">@userPlayList.Playlist.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @onchange="OnNewPlaylistNameAdded">
        </div>
        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
        {
            <div class="alert alert-info fade show">
                <div class="d-flex align-items-start">
                    <div class="flex-grow-1">
                        <span>@ErrorMessage</span>
                    </div>
                    <button type="button" class="btn-close" aria-label="Close" @onclick="CloseErrorMessage"></button>
                </div>
            </div>
        }

    </Body>

    <Footer>
        @{
            <button class="btn btn-success" @onclick="AddTracks">Save</button>
        }

    </Footer>
</Modal>




